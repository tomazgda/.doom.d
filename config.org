#+TITLE: Config
#+PROPERTY: header-args :tangle config.el :results silent 

* Table of Contents :toc:
- [[#user-details][User Details]]
- [[#themes][Themes]]
- [[#line-numbers][Line Numbers]]
- [[#org][Org]]
  - [[#directory][Directory]]
  - [[#org-roam][Org-Roam]]
- [[#elfeed][Elfeed]]
- [[#agenda][Agenda]]
  - [[#dir][Dir]]
- [[#mu4e][Mu4e]]
  - [[#viewing][Viewing]]
  - [[#sending][Sending]]
- [[#babel][Babel]]
- [[#modeline][Modeline]]
  - [[#window-tracking][Window Tracking]]
  - [[#modeline-appearance][Modeline appearance]]
- [[#fringe][Fringe]]
- [[#open-windows-in-vertical-split][Open Windows in Vertical Split]]
- [[#visual-line-mode][Visual-line-mode]]
- [[#rust][Rust]]

* User Details
#+begin_src elisp
(setq user-full-name "Tomaz GdA"
      user-mail-address "tomazgda@icloud.com.com")
#+end_src

* Themes
#+begin_src elisp
(modus-themes-load-themes)
(setq doom-theme 'modus-operandi)
(global-set-key (kbd "<f4>") #'modus-themes-toggle)
(setq
modus-themes-org-blocks 'greyscale
modus-themes-mode-line 'borderless

modus-themes-variable-pitch-ui t
      modus-themes-variable-pitch-headings t
      modus-themes-scale-headings t
      modus-themes-scale-1 1.1
      modus-themes-scale-2 1.15
      modus-themes-scale-3 1.21
      modus-themes-scale-4 1.27
      modus-themes-scale-5 1.33)

(run-at-time "08:00" (* 60 60 24) (lambda () (enable-theme 'modus-operandi)))
(run-at-time "18:00" (* 60 60 24) (lambda () (enable-theme 'modus-vivendi)))
#+end_src

* Line Numbers
#+begin_src elisp
(setq display-line-numbers-type nil)
#+end_src
* Org
** Directory
#+begin_src elisp
(setq org-directory "~/org/")
(setq deft-directory "~/org"
      deft-extensions '("org" "txt")
      deft-recursive t)
(setq org-roam-directory "~/org/roam")
(setq org-journal-dir "~/org/journal")
#+end_src
** Org-Roam
#+begin_src elisp
 (use-package org-roam-server
  :ensure t
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))

(when (org-roam--org-roam-file-p)
  (org-roam))

#+end_src
* Elfeed
#+begin_src elisp
(setq elfeed-feeds '(
        ;; proper news
        ("http://feeds.bbci.co.uk/news/world/rss.xml" news)
        ("https://www.theguardian.com/world/rss" news)
        ;; youtube
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC-lHJZR3Gqxm24_Vd_AJ5Yw" youtube pewds)
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCGwu0nbY2wSkW8N-cghnLpA" youtube jaiden)
        ;; reddit
        ("https://www.reddit.com/r/linux.rss" reddit linux)
))
#+end_src
* Agenda
** Dir
#+begin_src elisp
(setq org-agenda-files '("~/org/todo"))
#+end_src
* Mu4e
** Viewing
#+begin_src elisp
(add-to-list 'load-path "/opt/homebrew/share/emacs/site-lisp/mu/mu4e")
(require 'mu4e)
(setq mail-user-agent 'mu4e-user-agent)

(after! mu4e
  (setq
   mu4e-headers-skip-duplicates  t
   mu4e-view-show-images t
   mu4e-view-show-addresses t
   mu4e-compose-format-flowed nil
   mu4e-date-format "%y/%m/%d"
   mu4e-headers-date-format "%Y/%m/%d"
   mu4e-change-filenames-when-moving t
   mu4e-attachments-dir "~/Downloads"
   mu4e-refile-folder "/icloud/Archive"
   mu4e-sent-folder   "/icloud/Sent"
   mu4e-drafts-folder "/icloud/Drafts"
   mu4e-trash-folder  "/icloud/Trash"
   mu4e-get-mail-command  "mbsync -a"))
#+end_src
** Sending
#+begin_src elisp
(after! mu4e
  (setq sendmail-program "/opt/homebrew/bin/msmtp"
  send-mail-function #'smtpmail-send-it
  message-sendmail-f-is-evil t
  message-sendmail-extra-arguments '("--read-envelope-from"); , "--read-recipients")
  message-send-mail-function #'message-send-mail-with-sendmail))
#+end_src
* Babel
* Modeline
:PROPERTIES:
:header-args: :tangle no
:END:
[yanked off https://occasionallycogent.com/custom_emacs_modeline/index.html]
** Window Tracking
#+begin_src elisp
;; Keep track of selected window, so we can render the modeline differently
(defvar cogent-line-selected-window (frame-selected-window))
(defun cogent-line-set-selected-window (&rest _args)
  (when (not (minibuffer-window-active-p (frame-selected-window)))
    (setq cogent-line-selected-window (frame-selected-window))
    (force-mode-line-update)))
(defun cogent-line-unset-selected-window ()
  (setq cogent-line-selected-window nil)
  (force-mode-line-update))
(add-hook 'window-configuration-change-hook #'cogent-line-set-selected-window)
(add-hook 'focus-in-hook #'cogent-line-set-selected-window)
(add-hook 'focus-out-hook #'cogent-line-unset-selected-window)
(advice-add 'handle-switch-frame :after #'cogent-line-set-selected-window)
(advice-add 'select-window :after #'cogent-line-set-selected-window)
(defun cogent-line-selected-window-active-p ()
  (eq cogent-line-selected-window (selected-window)))
#+end_src

** Modeline appearance
#+begin_src elisp
(setq-default mode-line-format
              (list

;               '(:eval (propertize (if (eq 'emacs evil-state) "  " "  ")
;                                   'face (cogent/evil-state-face)))

               " "
               mode-line-misc-info ; for eyebrowse

               '(:eval (when-let (vc vc-mode)
                         (list " "
                               (propertize (substring vc 5)
                                           'face 'font-lock-comment-face)
                               " ")))

               '(:eval (list
                        ;; the buffer name; the file name as a tool tip
                        (propertize " %b" 'face 'font-lock-type-face
                                    'help-echo (buffer-file-name))
                        (when (buffer-modified-p)
                          (propertize
                           " ~"
                           'face (if (cogent-line-selected-window-active-p)
                                     'cogent-line-modified-face
                                   'cogent-line-modified-face-inactive)))
                        (when buffer-read-only
                          (propertize
                           " "
                           'face (if (cogent-line-selected-window-active-p)
                                     'cogent-line-read-only-face
                                   'cogent-line-read-only-face-inactive)))
                        " "))


               ;; spaces to align right
               '(:eval (propertize
                        " " 'display
                        `((space :align-to (- (+ right right-fringe right-margin)
                                              ,(+ 3 (string-width mode-name)))))))

               ;; the current major mode
               (propertize " %m " 'face 'font-lock-string-face)))
#+end_src

* Fringe
#+begin_src elisp
(fringe-mode 15)
#+end_src

* Open Windows in Vertical Split
#+begin_src elisp
(setq
   split-width-threshold 0
   split-height-threshold nil)
#+end_src
* Visual-line-mode
#+begin_src elisp
(global-visual-line-mode 1)
(global-visual-fill-column-mode 1)
(set-fill-column 100)
#+end_src


* TODO Rust
#+begin_src elisp



#+end_src
